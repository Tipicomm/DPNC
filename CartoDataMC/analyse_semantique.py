# -*- coding: utf-8 -*-

import os
import pandas as pd
import openai
from tqdm import tqdm

# üìÅ Dossier des donn√©es
DOSSIER = "CartoDataMC"
FICHIER_ENTREE = f"{DOSSIER}/Cartographie_Culture_properties.csv"
FICHIER_SORTIE = f"{DOSSIER}/Cartographie_Culture_clusters.csv"

# üîë R√©cup√©ration de la cl√© API (√† d√©finir dans GitHub Secrets : OPENAI_API_KEY)
openai.api_key = os.getenv("OPENAI_API_KEY")

# üì• Charger les donn√©es
df = pd.read_csv(FICHIER_ENTREE).head(100)  # Analyse sur les 100 premi√®res lignes

# üß† Requ√™te GPT pour chaque propri√©t√©
descriptions = []

for _, row in tqdm(df.iterrows(), total=len(df), desc="üîç Analyse s√©mantique"):
    context = f"""
    La propri√©t√© suivante est issue d‚Äôun jeu de donn√©es culturels publics :
    
    - Nom de la propri√©t√© : {row['property_name']}
    - Type : {row['property_type']}
    - Titre du jeu de donn√©es : {row.get('dataset_title', '')}
    - Description : {row.get('description', '')}
    - Tags : {row.get('tags', '')}
    
    Donne une cat√©gorie s√©mantique simple et compr√©hensible pour regrouper cette propri√©t√© (ex : "informations administratives", "localisation", "donn√©es temporelles", "identifiants", "relations", etc.).
    """

    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "Tu es un assistant qui classe les propri√©t√©s de jeux de donn√©es culturels selon leur nature s√©mantique."},
                {"role": "user", "content": context}
            ],
            temperature=0.2,
            max_tokens=100
        )
        category = response["choices"][0]["message"]["content"].strip()
    except Exception as e:
        category = f"Erreur : {str(e)}"

    descriptions.append(category)

# ‚ûï Ajouter les r√©sultats √† la table
df["semantic_category"] = descriptions

# üíæ Sauvegarder
df.to_csv(FICHIER_SORTIE, index=False)
print(f"‚úÖ Cat√©gorisation s√©mantique enregistr√©e dans : {FICHIER_SORTIE}")
